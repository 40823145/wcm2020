var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每周上課內容', 'text': 'w1~w6:建立隨身系統 \n w7:(1.)建立網站 (2.)設定 OBS、Youtube直播 \n w8~w9:線上課程、期中報告 \n w10~w14:Virtualbox Ubuntu \n w15:pypdf2 \n w16~w18:使用Leo Editor將pypdf2變成網頁版 \n \n', 'tags': '', 'url': '每周上課內容.html'}, {'title': 'Python', 'text': "課程評分程式 \n '''\n根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績\n'''\n\ndef diff(自評分數, 互評得分):\n    return abs(自評分數 - 互評得分)\n    \ndef max(自評分數, 互評得分):\n    if 自評分數 > 互評得分:\n        return 自評分數\n    else:\n        return 互評得分\n\ndef 分組比分(自評分數, 互評得分):\n    if diff(自評分數, 互評得分) < 5:\n        學員得分 = max(自評分數, 互評得分)\n    else:\n        學員得分 = 互評得分 - diff(自評分數, 互評得分)\n    return 學員得分\n    \ndef 全班比分(學員得分, 教師評分):\n    if diff(學員得分, 教師評分) < 5:\n        學員成績 = max(學員得分, 教師評分)\n    else:\n        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4\n    return 學員成績\n\ndef 學員成績(自評分數, 互評得分, 教師評分):\n    學員分組得分 = 分組比分(自評分數, 互評得分)\n    學員課程成績 = 全班比分(學員分組得分, 教師評分)\n    return 學員課程成績\n    \nprint(學員成績(80, 70, 60))\nprint(學員成績(60, 70, 80)) \n \n", 'tags': '', 'url': 'Python.html'}, {'title': 'Pypdf2', 'text': '\n 擷取一段 \n # pypdf2_ex1.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n\npdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))\n#欲擷取pdf名稱\ninformation = [("WhatIsCMS",18,45)]\n#擷取頁數\n\nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\n \n 擷取兩段 \n # pypdf2_ex2.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n\npdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))\ninformation = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]\n\nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\n \n 合併 \n # pypdf2_ex3.py\n# merge several pdf files\nimport sys\nimport PyPDF2\n\npdf_write_object = PyPDF2.PdfFileWriter()\n\n#for i in sys.argv[1:]:\nfor i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:\n    pdf_read_object = PyPDF2.PdfFileReader(i)\n    print(\'processing file : \'+ i + \'number of pages : \' +  str(pdf_read_object.numPages))\n    for page in range(pdf_read_object.numPages):\n        pdf_write_object.addPage(pdf_read_object.getPage(page))\n\nfinal_file_object = open(\'2020CMS.pdf\', \'wb\')\npdf_write_object.write(final_file_object)\nfinal_file_object.close()\n \n \n \n \n \n', 'tags': '', 'url': 'Pypdf2.html'}, {'title': 'VirtuaBox', 'text': '虛擬主機，下在同系統的iso檔，灌在虛擬主機中運行，不會影響到電腦原本系統 \n \n \n \n \n', 'tags': '', 'url': 'VirtuaBox.html'}, {'title': '上課內容', 'text': '', 'tags': '', 'url': '上課內容.html'}, {'title': 'MBR與GPT', 'text': 'MBR: \xa0 Master Boot Record 主開機記錄 [啟動系統: BIOS ] 只適用於最大容量 2TB的硬碟 ，如果使用容量更大的硬碟，則無法識別，同時MBR也只支援最大4個主分割區。 現今的社會都是大容量的硬碟，所以使用MBR會被侷限。 GPT: \xa0 GUID Partition Table (俗稱:GUID磁碟分割表格) [啟動系統: UEIF ] GPT逐漸取代掉MBR，GPT使用了更現代的技術取代老舊的MBR磁碟分割表格。 GPT的推出與 \xa0 UEFI \xa0 是相輔相成的， 想要 使用GPT 就必須是 UEFI的環境 。 \n 優勢: 1. 突破了 MBR 最大只支援 2T 硬碟的限制 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 2. 允許無限數量的分割區不必創建擴展分區即可使其工作 \n 在 MBR 的磁碟上， 分割區和引導資料都存儲在 同一個地方 。如果資料被 覆蓋 或 損壞 ，就無法電將腦啟動。 相較之下， GPT 磁碟上會儲存 多個副本 ， 使其更加穩定、安全，並且可以在 資料損壞 下進行 修復 。 \n', 'tags': '', 'url': 'MBR與GPT.html'}, {'title': 'BIOS與UEFI', 'text': 'BIOS : \xa0 Basic Input Output System\xa0\xa0基本輸入輸出系統 \n BIOS是位於電腦主機板上的晶片中的低級軟體。電腦啟動時， BIOS會喚醒電腦的硬體元件，確保它們正常運行。近幾年BIOS就沒有太大的技術改革，而且一直局限於 2TB 的磁碟，而且啟動時僅有的 1MB執行空間 ，導致啟動時間被拉長。 \n UEFI : \xa0 Unified Extensible Firmware Interface\xa0\xa0 統一可延伸韌體介面 [UEFI就像 進階版的BIOS ，但不能稱它為BIOS] \n UEFI是一種新的主機板引導項，它不同於傳統BIOS的開機流程，這種介面可以讓作業系統自動從預啟動的操作環境中載入，加快作業系統的速度。 UEFI帶來的 最大改變就是 圖形化 、 可滑鼠操作的介面 \n 優勢:\xa0 1. \xa0 \xa0 有更強的安全性 \xa0 \xa0 \xa0 \xa0 \xa0 2. \xa0\xa0 啟動速度更快 \xa0 \xa0 \xa0 \xa0 \xa0 3. \xa0\xa0 支援容量更大 \n', 'tags': '', 'url': 'BIOS與UEFI.html'}, {'title': '何謂wsgi', 'text': 'WSGI ( Web Server Gateway Interface ) : \n WSGI 為一個Gateway，也就是閘道器。閘道器的作用就是在協議之間進行轉換。 \n WSGI\xa0 是一個web元件的介面防範，wsgi將web元件分為三類： web伺服器、web中介軟體、web應用程式。 作為 Web 伺服器與 Web 應用程式或應用框架之間的一種低階別的介面，以提升可移植 Web 應用開發的共同點。 \n WSGI有兩方： 伺服器 或 閘道器 一方，以及 應用程式 或 應用框架 一方。服務方呼叫應用方，提供環境資訊，以及一個回撥函式，並接收Web內容作為返回值。 \n', 'tags': '', 'url': '何謂wsgi.html'}, {'title': '何謂 API', 'text': '應用程式介面 ( A pplication\xa0 P rogramming\xa0 I nterface ): \n 為用於打造應用程式軟體的一組副程式定義、協定與工具。 一般而言，API 是指各種軟體組件之間一套明確定義的溝通方法。簡單來說， 其就像是讓你用的一個函式庫，呼叫你想要使用的函式，並給予相對應的參數，函式便回傳給你結果。 \n WebAPI \n 在 \xa0 Web Application \xa0 的開發情境下的 API 被稱為 Web API，在 Web API 作用時，客戶端和伺服器端會透過 HTTP 通訊協定來進行請求與回應。使用 Web API 的一方是客戶端，可能是瀏覽器、手機或者穿戴式設備等等，客戶端會向伺服器端發出請求，要求執行某個 CRUD 動作。 \n', 'tags': '', 'url': '何謂 API.html'}, {'title': '何謂 URI', 'text': '統一資源識別碼 (U niform \xa0 R esource \xa0 I dentifier ) : \n 是可供您的應用程式在內部網路或網際網路上使用之資源的精簡標記法。 \xa0URI \xa0 類別會定義用來處理 URI 的屬性和方法，包括剖析、比較和合併。 \n URI \xa0 又可細分為 : \n URL:\xa0 統一資源定位符 (Uniform Resource Locator) \n URN:\xa0 統一資源名稱 (Uniform Resource Name) \n', 'tags': '', 'url': '何謂 URI.html'}, {'title': '何謂 URL 、 URN', 'text': 'URL 統一資源定位符 (Uniform Resource Locator) ;又名網域名稱 \n URL為URI的子集，其為網際網路 上標準的 資源的位址。 \n URN\xa0 統一資源名稱 (Uniform Resource Name) \n URN 並非如 URL 一般是用於指示資源的位址，而是用來鑑別實體的唯一性，也就是以名稱當作識別的依據。 \n \n', 'tags': '', 'url': '何謂 URL 、 URN.html'}, {'title': '建立個人網站', 'text': '利用 Github Pages 與 CMSiMDE 建立個人網站 \n (1)進入 github 新建一個repository(資料庫) \n \n (2)在隨身系統新建資料夾(test/data/tmp) \n (mkdir test)(cd test)(mkdir data)(cd data )(mkdir tmp) \n \n (3)git clone自己倉儲的網址完成後 git submodule add \n \n \n \n (4)進入cmsimde\xa0 把up_dir裡的東西全部複製 \n \n 放到cmsimde外面\xa0 test目錄下 \n \n (5)進入cmsimde將wsgi.py拖入SciTE\xa0 \xa0 \xa0tools-->go \n', 'tags': '', 'url': '建立個人網站.html'}, {'title': 'ssh key', 'text': '\n 隨身系統輸入sh \n 輸入ssh-keygen -t rsa -b 4096 -C "學號" \n 預設之儲存在y:\\home\\.ssh目錄裡 \n \n 使用puttygen將private key(id_rsa)導入，並轉換為putty能夠讀懂的格式(.ppk)檔案 \n 存好(.ppk)檔後 \n 使用scite將public key (id_rsa.pub)打開，到工具列找到Options內Wrap就能看建完整的檔案內容 \n 將public key內容複製，進入github右上角下拉選單點擊settings \n', 'tags': '', 'url': 'ssh key.html'}, {'title': 'ssh putty', 'text': '開啟putty \n \n 選擇前面步驟所生成之.ppk檔案，回到Session中按下save存檔 \n 進入Y:\\tmp\\wcm2020\\.git內修改config檔案，修改為git@github.com:40823145/test.git \n', 'tags': '', 'url': 'ssh putty.html'}, {'title': '使用leo編輯Palican', 'text': '利用Scite開啟 launchLeo.py， 並且按Tools-Go \n', 'tags': '', 'url': '使用leo編輯Palican.html'}, {'title': 'pelican建立blog', 'text': '安裝markdown、leo 和 pelican \n 修改pelican的資料 \n 設定 共用，遠端，近端 \n 設定你的blog 的內容 \n 執行\xa0 ( 放入黑板 ) \n', 'tags': '', 'url': 'pelican建立blog.html'}, {'title': 'test', 'text': '', 'tags': '', 'url': 'test.html'}]};