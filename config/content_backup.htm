<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每周上課內容</h1>
<h4 style="text-align: left;"><strong>w1~w6:建立隨身系統</strong></h4>
<h4 style="text-align: left;"><strong>w7:(1.)建立網站 (2.)設定 OBS、Youtube直播</strong></h4>
<h4 class="line number1 index0 alt2" style="text-align: left;"><strong>w8~w9:線上課程、期中報告</strong></h4>
<h4 class="line number1 index0 alt2" style="text-align: left;"><strong>w10~w14:Virtualbox Ubuntu</strong></h4>
<h4 class="line number1 index0 alt2" style="text-align: left;"><strong>w15:pypdf2</strong></h4>
<h4 class="line number1 index0 alt2" style="text-align: left;"><strong>w16~w18:使用Leo Editor將pypdf2變成網頁版</strong></h4>
<p></p>
<h1>Python</h1>
<p>課程評分程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績
'''

def diff(自評分數, 互評得分):
    return abs(自評分數 - 互評得分)
    
def max(自評分數, 互評得分):
    if 自評分數 &gt; 互評得分:
        return 自評分數
    else:
        return 互評得分

def 分組比分(自評分數, 互評得分):
    if diff(自評分數, 互評得分) &lt; 5:
        學員得分 = max(自評分數, 互評得分)
    else:
        學員得分 = 互評得分 - diff(自評分數, 互評得分)
    return 學員得分
    
def 全班比分(學員得分, 教師評分):
    if diff(學員得分, 教師評分) &lt; 5:
        學員成績 = max(學員得分, 教師評分)
    else:
        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4
    return 學員成績

def 學員成績(自評分數, 互評得分, 教師評分):
    學員分組得分 = 分組比分(自評分數, 互評得分)
    學員課程成績 = 全班比分(學員分組得分, 教師評分)
    return 學員課程成績
    
print(學員成績(80, 70, 60))
print(學員成績(60, 70, 80))</pre>
<p></p>
<h1>Pypdf2</h1>
<p></p>
<p><strong>擷取一段</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex1.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))
#欲擷取pdf名稱
information = [("WhatIsCMS",18,45)]
#擷取頁數

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<p><strong>擷取兩段</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex2.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))
information = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<p><strong>合併</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex3.py
# merge several pdf files
import sys
import PyPDF2

pdf_write_object = PyPDF2.PdfFileWriter()

#for i in sys.argv[1:]:
for i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:
    pdf_read_object = PyPDF2.PdfFileReader(i)
    print('processing file : '+ i + 'number of pages : ' +  str(pdf_read_object.numPages))
    for page in range(pdf_read_object.numPages):
        pdf_write_object.addPage(pdf_read_object.getPage(page))

final_file_object = open('2020CMS.pdf', 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()
</pre>
<p><img alt="" height="252" src="/images/註解 2020-06-20 102034.png" width="516"/></p>
<p></p>
<p></p>
<p></p>
<h1>VirtuaBox</h1>
<p><span>虛擬主機，下在同系統的iso檔，灌在虛擬主機中運行，不會影響到電腦原本系統</span></p>
<p><span><img alt="" height="557" src="/images/註解 2020-06-20 100614.png" width="963"/></span></p>
<p><span><img alt="" height="683" src="/images/註解 2020-06-20 100813.png" width="802"/></span></p>
<p><span><img alt="" height="713" src="/images/註解 2020-06-20 100841.png" width="1103"/></span></p>
<p></p>
<h1>上課內容</h1>
<h2>MBR與GPT</h2>
<p><span><strong>MBR:</strong><span> </span>Master Boot Record 主開機記錄</span><span><br/>[啟動系統:<strong>BIOS</strong>]<br/>只適用於最大容量<span><strong><span>2TB的硬碟</span></strong></span>，如果使用容量更大的硬碟，則無法識別，同時MBR也只支援最大4個主分割區。<br/>現今的社會都是大容量的硬碟，所以使用MBR會被侷限。<br/><br/><strong>GPT:</strong><span> </span>GUID Partition Table (俗稱:GUID磁碟分割表格)</span><br/><span>[啟動系統:</span><strong>UEIF</strong><span>]</span><br/>GPT逐漸取代掉MBR，GPT使用了更現代的技術取代老舊的MBR磁碟分割表格。<br/>GPT的推出與<span> </span><span><strong>UEFI</strong></span><span> </span>是相輔相成的，<span>想要<strong><span>使用GPT</span></strong>就必須是<span><strong>UEFI的環境</strong></span></span>。</p>
<p><strong><span>優勢: 1.</span></strong><span><span>突破了<strong>MBR</strong>最大只支援<strong>2T</strong>硬碟的限制<br/>         <strong><span><span> </span>2.</span></strong>允許無限數量的分割區不必創建擴展分區即可使其工作</span></span></p>
<p><span><span>在<strong>MBR</strong>的磁碟上，<span>分割區和引導資料都存儲在<strong><span>同一個地方</span></strong>。如果資料被<span><strong>覆蓋</strong></span>或<strong><span>損壞</span></strong>，就無法電將腦啟動。</span><br/>相較之下，<strong>GPT</strong>磁碟上會儲存<strong><span>多個副本<span>，</span></span></strong><span><span>使其更加穩定、安全，並且可以在<strong>資料損壞</strong>下進行<strong>修復</strong>。</span></span></span></span></p>
<h2>BIOS與UEFI</h2>
<p><span><strong>BIOS :</strong> </span><span>Basic Input Output System  基本輸入輸出系統</span></p>
<p><span>BIOS是位於電腦主機板上的晶片中的低級軟體。電腦啟動時， BIOS會喚醒電腦的硬體元件，確保它們正常運行。近幾年BIOS就沒有太大的技術改革，而且一直局限於<span><strong>2TB</strong></span>的磁碟，而且啟動時僅有的<span><strong>1MB執行空間</strong></span>，導致啟動時間被拉長。</span></p>
<p><br/><strong><span>UEFI :</span> </strong>Unified Extensible Firmware Interface  <span>統一可延伸韌體介面</span><br/>[UEFI就像<span><strong>進階版的BIOS</strong></span>，但不能稱它為BIOS]</p>
<p><span>UEFI是一種新的主機板引導項，它不同於傳統BIOS的開機流程，這種介面可以讓作業系統自動從預啟動的操作環境中載入，加快作業系統的速度。</span><br/>UEFI帶來的<span><strong>最大改變就是<span>圖形化</span>、<span>可滑鼠操作的介面</span></strong></span></p>
<p><span><strong>優勢: </strong><span><span>1.</span> <span> </span><strong>有更強的安全性</strong></span></span><br/><span>          2.</span>  <span><strong>啟動速度更快</strong></span><br/><span>          3.</span>  <span><strong>支援容量更大</strong></span></p>
<h2>何謂wsgi</h2>
<p>WSGI (<span>Web Server Gateway Interface</span>) :</p>
<p><span>WSGI 為一個Gateway，也就是閘道器。閘道器的作用就是在協議之間進行轉換。</span></p>
<p><span>WSGI <span>是一個web元件的介面防範，wsgi將web元件分為三類：<strong>web伺服器、web中介軟體、web應用程式。</strong>作為 Web 伺服器與 Web 應用程式或應用框架之間的一種低階別的介面，以提升可移植 Web 應用開發的共同點。</span></span></p>
<p><span>WSGI有兩方：<strong>伺服器</strong>或<strong>閘道器</strong>一方，以及<strong>應用程式</strong>或<strong>應用框架</strong>一方。服務方呼叫應用方，提供環境資訊，以及一個回撥函式，並接收Web內容作為返回值。</span></p>
<h2>何謂 API</h2>
<p><b>應用程式介面 (</b><strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface<b>):</b></p>
<p>為用於打造應用程式軟體的一組副程式定義、協定與工具。<span>一般而言，API 是指各種軟體組件之間一套明確定義的溝通方法。簡單來說，<strong>其就像是讓你用的一個函式庫，呼叫你想要使用的函式，並給予相對應的參數，函式便回傳給你結果。</strong></span></p>
<p><strong>WebAPI</strong></p>
<p><span>在<span> </span><strong>Web Application</strong><span> </span>的開發情境下的 API 被稱為 Web API，在 Web API 作用時，客戶端和伺服器端會透過 HTTP 通訊協定來進行請求與回應。使用 Web API 的一方是客戶端，可能是瀏覽器、手機或者穿戴式設備等等，客戶端會向伺服器端發出請求，要求執行某個 CRUD 動作。</span></p>
<h2>何謂 URI</h2>
<p><b>統一資源識別碼 (U</b><span>niform<span> </span></span><b><b>R</b></b><span>esource<span> </span></span><b><b>I</b></b>dentifier<b>) :</b></p>
<p><span data-ttu-id="05b77-102">是可供您的應用程式在內部網路或網際網路上使用之資源的精簡標記法。</span><span><span> URI</span></span><span data-ttu-id="05b77-103"><span> </span>類別會定義用來處理 URI 的屬性和方法，包括剖析、比較和合併。</span></p>
<p><span data-ttu-id="05b77-103"><strong>URI</strong><span> </span>又可細分為 :</span></p>
<p><strong><span data-ttu-id="05b77-103">URL:  統一資源定位符 (Uniform Resource Locator)</span></strong></p>
<p><strong><span data-ttu-id="05b77-103">URN:  統一資源名稱 (Uniform Resource Name)</span></strong></p>
<h2>何謂 URL 、 URN</h2>
<p><strong><span data-ttu-id="05b77-103">URL 統一資源定位符 (Uniform Resource Locator) ;又名網域名稱</span></strong></p>
<p>URL為URI的子集，其為網際網路<span>上標準的<strong>資源的位址。</strong></span></p>
<p><span><strong><span data-ttu-id="05b77-103">URN  統一資源名稱 (Uniform Resource Name)</span></strong></span></p>
<p><span data-ttu-id="05b77-103"><strong>URN</strong>並非如<strong>URL</strong>一般是用於指示資源的位址，而是用來鑑別實體的唯一性，也就是以名稱當作識別的依據。</span></p>
<p><span data-ttu-id="05b77-103"></span></p>
<h1>建立個人網站</h1>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">利用 Github Pages 與 CMSiMDE 建立個人網站</yt-formatted-string></p>
<p>(1)進入<span>github 新建一個repository(資料庫)</span></p>
<p><img caption="false" height="521" src="/images/註解 2020-06-24 205252.png" width="960"/></p>
<p><span>(2)在隨身系統新建資料夾(test/data/tmp)</span></p>
<p><span>(mkdir test)(cd test)(mkdir data)(cd data</span><span>)(mkdir tmp)</span></p>
<p><span><img caption="false" height="538" src="/images/註解 2020-06-24 21100411111.png" width="960"/></span></p>
<p><span></span>(3)git clone自己倉儲的網址完成後<span>git submodule add</span></p>
<p><span><img caption="false" height="521" src="/images/註解 2020-06-24 211339.png" width="960"/></span></p>
<p><img caption="false" height="521" src="/images/註解 2020-06-24 211354.png" width="960"/></p>
<p><img caption="false" height="497" src="/images/22222.png" width="960"/></p>
<p><span>(4)進入cmsimde  把up_dir裡的東西全部複製</span></p>
<p><span><img caption="false" height="521" src="/images/123456.png" width="960"/></span></p>
<p><span>放到cmsimde外面  test目錄下</span></p>
<p><span><img caption="false" height="521" src="/images/987456.png" width="960"/></span></p>
<p><span>(5)進入cmsimde將wsgi.py拖入SciTE     tools--&gt;go</span></p>
<h1>ssh key</h1>
<p></p>
<p><span>隨身系統輸入sh</span></p>
<p><span>輸入ssh-keygen -t rsa -b 4096 -C "學號"<img alt="" height="1033" src="/images/sh.png" width="960"/></span></p>
<p><span>預設之儲存在y:\home\.ssh目錄裡</span></p>
<p><span><img alt="" height="1033" src="/images/ssh.png" width="960"/></span></p>
<p>使用puttygen將private key(id_rsa)導入，並轉換為putty能夠讀懂的格式(.ppk)檔案</p>
<p>存好(.ppk)檔後<img alt="" height="720" src="/images/puttyg.png" width="718"/></p>
<p><span>使用scite將public key (id_rsa.pub)打開，到工具列找到Options內Wrap就能看建完整的檔案內容<img alt="" height="1033" src="/images/pub.png" width="960"/></span></p>
<p><span>將public key內容複製，進入github右上角下拉選單點擊settings<img caption="false" height="517" src="/images/ssh setting.png" width="960"/></span></p>
<h1>ssh putty</h1>
<p>開啟putty</p>
<p><img alt="" height="649" src="/images/puttygit.png" width="651"/></p>
<p><span>選擇前面步驟所生成之.ppk檔案，回到Session中按下save存檔<img alt="" height="646" src="/images/選key.png" width="646"/></span></p>
<p><span>進入Y:\tmp\wcm2020\.git內修改config檔案，修改為git@github.com:40823145/test.git<img alt="" height="868" src="/images/config.png" width="958"/></span></p>
<h1>使用leo編輯Palican</h1>
<p><span>利用Scite開啟</span><strong>launchLeo.py，</strong><span>並且按Tools-Go</span></p>
<h1>pelican建立blog</h1>
<p><span>安裝markdown、leo 和 pelican</span></p>
<p><span>修改pelican的資料</span></p>
<p><span>設定 共用，遠端，近端</span></p>
<p><span>設定你的blog 的內容</span></p>
<p><span>執行  (<span>放入黑板</span><span>)</span></span></p>